nba
nba[low, ]
nba[, low]
nba[log(nba$salary2) < -3, c("player", "weight")]
nba[log(nba$salary2) < -3, c("player", "weight", "height", "team", "position")]
low
nba[nba$salary == low, ]
nba[nba$salary == low]
nba[low, ]
nba[c(low)]
nba[c(low), ]
low <- nba$salary2 < -3
nba[low]
nba[low, ]
low <- (nba$salary2 < -3)
low <- [nba$salary2 < -3]
nba[low]
nba[low, ]
low
length(low)
length(low == TRUE)
nba$salary2
low <- log(nba$salary2) < -3
low
nba[low, ]
length(low == TRUE)
length(low[low == TRUE])
nba[low, ]
summary(nba$points)
summary(log(nba$points))
summary(log(nba$points) + 1)
summary(log(nba$points + 1))
zeroes <- nba$points == 0
nba$points[zeroes]
nba$points[zeroes] = 0.1
nba$points
summary(log(nba$points))
boxplot(salary2 ~ age, data = nba,
xlab = "Age", ylab = "Salary (in millions)")
boxplot(points ~ age, data = nba,
xlab = "Age", ylab = "Salary (in millions)")
age2 <- nba$age
age2[age2 <= 19] <- 20
age2
cut(age2, breaks = c(24, 29), labels = c("20-24", "25-29", "30+"))
cut(age2, breaks = c(20, 24, 29), labels = c("20-24", "25-29", "30+"))
cut(age2, breaks = c(20, 24, 29), labels = c("20-24", "25-29", "30+"))
cut(age2, breaks = c(20, 24, 29, 30), labels = c("20-24", "25-29", "30+"))
cut(age2, breaks = c(19, 24, 29, 30), labels = c("20-24", "25-29", "30+"))
cut(age2, breaks = c(20, 25, 30), labels = c("20-24", "25-29", "30+"))
cut(age2, breaks = c(20, 25, 30, 100), labels = c("20-24", "25-29", "30+"))
nba2
age2
cut(age2, breaks = c(20, 25, 30, 100), labels = c("20-24", "25-29", "30+"))
cut(age2, breaks = c(19, 25, 30, 100), labels = c("20-24", "25-29", "30+"))
summary(cut(age2, breaks = c(19, 25, 30, 100), labels = c("20-24", "25-29", "30+")))
ag2
age2
summary(cut(age2, breaks = c(19, 25, 29, 100), labels = c("20-24", "25-29", "30+")))
(cut(age2, breaks = c(19, 25, 29, 100), labels = c("20-24", "25-29", "30+")))
(cut(age2, breaks = c(19, 24, 29, 100), labels = c("20-24", "25-29", "30+")))
summary(cut(age2, breaks = c(19, 24, 29, 100), labels = c("20-24", "25-29", "30+")))
palette1 <- c("#D4D62A", "#4F9D66", "#9575AB")
age_colors <- age2
palette1[1]
age_colors[age_colors == "20-24"] = palette1[1]
age_colors[age_colors == "25-29"] = palette1[2]
age_colors[age_colors == "30+"] = palette1[3]
age_colors
age2
age2 <- nba$age
age2[age2 <= 19] <- 20
age2 <- cut(age2, breaks = c(19, 24, 29, 100), labels = c("20-24", "25-29", "30+"))
summary(age2)
age_colors[age_colors == "20-24"] = palette1[1]
age_colors[age_colors == "25-29"] = palette1[2]
age_colors[age_colors == "30+"] = palette1[3]
age_colors <- age2
age_colors[age_colors == "20-24"] = palette1[1]
age_colors[age_colors == "25-29"] = palette1[2]
age_colors[age_colors == "30+"] = palette1[3]
age_colors
age_colors <- age2
age_colors
age_colors[age_colors == "20-24"]
age_colors[age_colors == "20-24"] = "yo"
revalue(age_colors, c("5-29"="two"))
age_colors = age2
age_colors <- age2
replace(age_colors, "30+", "test")
age_colors <- age2
levels(age_colors) <- palette1
age_colors
plot(salary ~ points, data = nba, log = "xy", main = "",
xlab = "Points (log scale)", ylab = "Salary (log $)",
col = age_colors, pch = 19, cex = 0.6)
legend("bottomright", fill = palette1, leg
plot(salary ~ points, data = nba, log = "xy", main = "",
xlab = "Points (log scale)", ylab = "Salary (log $)",
col = age_colors, pch = 19, cex = 0.6)
legend("bottomright", fill = palette1, legend = levels(age2),
title = "Age Groups", cex = 0.8)
boxplot(salary2 ~ position, data = nba,
xlab = "Position", ylab = "Salary (in millions)")
boxplot(salary2 ~ age, data = nba,
+ xlab = "Age", ylab = "Salary (in millions)")
boxplot(salary2 ~ age, data = nba,
+ xlab = "Age", ylab = "Salary (in millions)")
boxplot(salary2 ~ position, data = nba,
+ xlab = "Position", ylab = "Salary (in millions)")
boxplot(salary2 ~ position, data = nba,
+ xlab = "Position", ylab = "Salary (in millions)")
boxplot(salary2 ~ position, data = nba, xlab = "Position", ylab = "Salary (in millions)")
boxplot(salary2 ~ age, data = nba, xlab = "Position", ylab = "Salary (in millions)")
boxplot(points ~ position, data = nba, xlab = "Position", ylab = "Points")
pos_colors <- nba$position
levels(pos_colors) <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854")
pos_colors
boxplot(points ~ position, data = nba, xlab = "Position", ylab = "Points", border = age_colors)
boxplot(salary ~ points, data = nba, xlab = "Position", ylab = "Points", border = pos_colors)
plot(salary, points)
plot(salary, points, data = nba)
plot(nba$salary, nba$points)
boxplot(points ~ position, data = nba, xlab = "Position", ylab = "Points")
plot(salary ~ points, data = nba, log = "xy", main = "",
xlab = "Points (log scale)", ylab = "Salary (log $)",
col = pos_colors, pch = 19, cex = 0.6)
legend("bottomright", fill = levels(pos_colors), legend = levels(age2),
title = "Age Groups", cex = 0.8)
plot(salary ~ points, data = nba, log = "x", main = "",
xlab = "Points (log scale)", ylab = "Salary (log $)",
col = pos_colors, pch = 19, cex = 0.6)
legend("bottomright", fill = levels(pos_colors), legend = levels(age2),
title = "Age Groups", cex = 0.8)
plot(salary ~ points, data = nba, log = "y", main = "",
xlab = "Points (log scale)", ylab = "Salary (log $)",
col = pos_colors, pch = 19, cex = 0.6)
legend("bottomright", fill = levels(pos_colors), legend = levels(age2),
title = "Age Groups", cex = 0.8)
library(dplyr)
library(ggplot2)
dat <- read.csv('nba2018-players.csv', stringsAsFactors = FALSE)
dat <- read.csv('https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2018/master/data/nba2018-players.csv', stringsAsFactors = FALSE)
dat
slice(dat, 1:5)
slice(dat, seq(5, 50, by = 5))
slice(dat, length(dat)-4:length(n))
filter(data, height < 70)
filter(dat, height < 70)
filter(dat, team == "GSW")
filter(dat, team == "GSW" & pos == "C")
filter(dat, team == "GSW" & position == "C")
select(filter(dat, team == "LAL"), player)
select(filter(dat, team == "GSW" & position == "PG"), player, salary)
select(filter(dat, experience > 10 & salary <= 10000000), player, age, team)
head(select(filter(dat, experience == 1 & age == 20), player, team, height, weight))
gsw <- filter(dat, team == 'GSW')
mutate(gsw, product = height * weight)
gsw3 <- mutate(dat, log_height = log(height), log_weight = log(weight))
head(gsw3)
arrange(filter(dat, height < 71), height)
head(select(arrange(dat, salary), player, team, salary), 5)
head(select(arrange(dat, desc(salary)), player, team, salary), 5)
head(select(arrange(dat, desc(points3)), player, team, points3), 5)
gsw_mpg <- select(mutate(gsw, min_per_game = minutes / games), player, experience, min_per_game)
gsw_mpg
gsw_mpg <- arrange(select(mutate(gsw, min_per_game = minutes / games), player, experience, min_per_game), min_per_game)
gsw_mpg
gsw_mpg <- arrange(select(mutate(gsw, min_per_game = minutes / games), player, experience, min_per_game), desc(min_per_game))
gsw_mpg
summarise(dat, max(height))
summarise(dat, std(points3))
summarise(dat, st(points3))
summarise(dat, sd(points3))
summarise(group_by(dat, team), median(points3))
arrange(summarise(group_by(dat, team), mean(points3)), desc(`median(points3)`))
arrange(summarise(group_by(dat, team), mean(points3)), desc(median(points3)))
arrange(summarise(group_by(dat, team), mean(points3)), 2)
arrange(summarise(group_by(dat, team), mean_three = mean(points3)), desc(mean_three))
head(arrange(summarise(group_by(dat, team), mean_three = mean(points3)), mean_three), 5)
summarise(filter(dat, position == "PF" & experience <= 10 & experience >= 5), mean(age), sd(age))
plot(gsw$height, gsw$weight)
ggplot(gsw$height, gsw$weight)
ggplot(gsw, aes(x = height, y = weight))
qplot(gsw, aes(x = height, y = weight))
ggplot(gsw, aes(x = height, y = weight))
ggplot(gsw, aes(x = height, y = weight)) +
geom_point()
ggplot(gsw, aes(x = height, y = weight)) +
geom_point() + geom_text(aes(label = player))
ggplot(gsw, aes(x = salary)) +
geom_density(kernel = "gaussian")
ggplot(gsw, aes(x = points2)) +
geom_histogram(binwidth = 50)
ggplot(dat, aes(x = salary)) +
geom_density(kernel = "gaussian")
ggplot(dat, aes(x = points2)) +
geom_histogram(binwidth = 50)
ggplot(dat, aes(x = position)) +
geom_bar()
ggplot(dat, aes(x = experience, y = salary)) +
geom_point()
ggplot(dat, aes(x = experience, y = salary)) +
geom_point() + geom_smooth()
ggplot(dat, aes(x = experience, y = salary)) +
geom_point() + geom_smooth(method = lm)
ggplot(dat, aes(x = experience, y = salary)) +
geom_point() + geom_smooth(method = loess)
ggplot(dat, aes(x = experience, y = salary)) +
geom_point() + facet_wrap(~ position)
ggplot(dat, aes(x = experience, y = salary)) +
geom_point() + facet_wrap(~ team)
ggplot(gsw, aes(x = salary)) +
geom_density(kernel = "gaussian") + facet_grid(~ team)
ggplot(gsw, aes(x = salary)) +
geom_density(kernel = "gaussian") + facet_wrap(~ team)
ggplot(gsw, aes(x = salary)) + facet_wrap(~ team) +
geom_density(kernel = "gaussian")
ggplot(dat, aes(x = salary)) + facet_wrap(~ team) +
geom_density(kernel = "gaussian")
ggplot(dat, aes(x = height, y = weight)) +
geom_point() + facet_wrap(~ position)
ggplot(dat, aes(x = height, y = weight)) +
geom_density2d() + facet_wrap(~ position)
ggplot(dat, aes(x = height, y = weight)) +
geom_density2d() + facet_grid(position ~ .)
ggplot(gsw, aes(x = experience, y = salary)) + geom_point() + theme_bw()
ggplot(dat, aes(x = height, y = weight)) +
geom_density2d() + facet_grid(position ~ .) + theme_dark()
ggplot(dat, aes(x = height, y = weight)) +
geom_density2d(color = "red") + facet_grid(position ~ .) + theme_dark()
ggplot(dat, aes(x = height, y = weight)) +
geom_density2d(color = "yellow") + facet_grid(position ~ .) + theme_dark()
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/' repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- c("character", "factor", "factor", "integer", "integer", "integer", "integer", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer")
dat <- read.csv(datafile, colClasses = data_types)
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/' repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- c("character", "factor", "factor", "integer", "integer", "integer", "integer", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer")
dat <- read.csv(datafile, colClasses = data_types)
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- c("character", "factor", "factor", "integer", "integer", "integer", "integer", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer")
dat <- read.csv(datafile, colClasses = data_types)
summary(dat)
dat
install.packages(readr)
install.packages("readr")
librar(readr)
library(readr)
read_csv(datafile)
read_csv(datafile, colClasses = data_types)
read_csv(datafile, col_types = data_types)
d2_types = c(col_character(), col_character(), col_factor(), col_integer(), col_integer(), col_integer(), col_character(), col_double(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer())
lenght(d2_types)
length(d2_types)
d2_types
d2_types <- c(col_character(), col_character(), col_factor(), col_integer(), col_integer(), col_integer(), col_character(), col_double(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer())
length(d2_types)
d2_types
read_csv(datafile, col_types = cols(col_character(), col_character(), col_factor(), col_integer(), col_integer(), col_integer(), col_integer(), col_character(), col_double(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer()))
read_csv(datafile, col_types = cols(col_skip(), col_character(), col_factor(), col_integer(), col_integer(), col_integer(), col_integer(), col_character(), col_double(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer()))
library(dplyr)
dat <- read_csv(datafile, col_names = TRUE, col_types = cols(col_character(), col_character(), col_factor(), col_integer(), col_integer(), col_integer(), col_integer(), col_character(), col_double(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer()))
summarise(group_by(dat, team), mean(salary))
summarise(group_by(dat, team), mean(salary), median(salary))
summarise(group_by(dat, team), sum(salary), mean(salary), median(salary))
summarise(group_by(dat, team), total_salary = sum(salary), mean_salary = mean(salary), median_salary = median(salary))
team_salaries <- summarise(group_by(dat, team), total_salary = sum(salary), mean_salary = mean(salary), median_salary = median(salary))
as.data.frame(team_salaries)
ggplot(team_salaries, aes(x = team, y = total_salary)) + geom_bar()
ggplot(team_salaries, aes(x = total_salary)) + geom_bar()
ggplot(team_salaries, aes(x = team, y = total_salary)) + geom_col()
ggplot(team_salaries, aes(x = team, y = total_salary)) + geom_col() + coord_flip()
ggplot(arrange(team_salaries, desc(total_salary)), aes(x = team, y = total_salary)) + geom_col() + coord_flip()
arrange(team_salaries, desc(total_salary))
temp <- arrange(team_salaries, desc(total_salary))
temp
ggplot(teamp, aes(x = team, y = total_salary)) + geom_col() + coord_flip()
ggplot(temp, aes(x = team, y = total_salary)) + geom_col() + coord_flip()
ggplot(temp, aes(x = team, y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = mean(total_salary), color="blue")
ggplot(dat, aes(x = team, y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = mean(total_salary), color="blue")
dat
temp
ggplot(team_salaries, aes(x = team, y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = mean(total_salary), color="blue")
m <- mean(team_salaries$total_salary)
m
ggplot(team_salaries, aes(x = team, y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="blue")
ggplot(team_salaries, aes(x = reorder(team, -team_salaries), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="blue")
ggplot(team_salaries, aes(x = reorder(team, team_salaries), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="blue")
reorder(team, team_salaries)
ggplot(team_salaries, aes(x = reorder(team, -total_salary), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="blue")
ggplot(team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="blue")
ggplot(team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="red")
ggplot(team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="red") + labs(x = "Total Salary")
ggplot(team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="red") + labs(x = "Team", y = "Total Salary in Millions", title = "NBA Teams by Salary, ranked")
team_salaries <- summarise(group_by(mutate(dat, salary_m = salary / 1000000), team), total_salary = sum(salary_m), mean_salary = mean(salary_m), median_salary = median(salary_m))
team_salaries
ggplot(team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="red") + labs(x = "Team", y = "Total Salary in Millions", title = "NBA Teams by Salary, ranked")
ggplot(team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="red") + labs(x = "Team", y = "Total Salary in Millions", title = "NBA Teams by Salary, ranked")
team_salaries
ggplot(team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="red") + labs(x = "Team", y = "Total Salary in Millions", title = "NBA Teams by Salary, ranked")
m <- mean(team_salaries$total_salary)
ggplot(team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="red") + labs(x = "Team", y = "Total Salary in Millions", title = "NBA Teams by Salary, ranked")
team_points <- summarise(group_by(dat, team), total_salary = sum(points), mean_salary = mean(points), median_salary = median(points))
team_points
team_points <- summarise(group_by(dat, team), total_points = sum(points), mean_points = mean(points), median_points = median(points))
team_points
m <- mean(team_points$total_points)
ggplot(team_points, aes(x = reorder(team, total_points), y = total_points)) + geom_col() + coord_flip() + geom_hline(yintercept = m, color="red") + labs(x = "Team", y = "Total Points", title = "NBA Teams by Points, ranked")
inner_join(total_salary, total_points, by = "team")
inner_join(team_salary, team_points, by = "team")
inner_join(team_points, team_salary, by = "team")
inner_join(team_points, team_salaries, by = "team")
mutate(points_salary, cost_point = total_salary / total_points)
points_salary <- inner_join(team_salaries, team_points, by = "team")
mutate(points_salary, cost_point = total_salary / total_points)
as.data.frame(mutate(points_salary, cost_point = total_salary / total_points))
ggplot(points_salary, aes(x = cost_point)) + geom_histogram()
points_salary <- mutate(points_salary, cost_point = total_salary / total_points)
ggplot(points_salary, aes(x = cost_point)) + geom_histogram()
ggplot(points_salary, aes(x = cost_point)) + geom_histogram(binwidth = 50)
ggplot(points_salary, aes(x = cost_point)) + geom_histogram(binwidth = 40)
ggplot(points_salary, aes(x = cost_point)) + geom_histogram(binwidth = 20)
ggplot(points_salary, aes(x = cost_point)) + geom_histogram(binwidth = 10)
ggplot(points_salary, aes(x = cost_point)) + geom_histogram(binwidth = 60)
ggplot(points_salary, aes(x = cost_point)) + geom_histogram(binwidth = 2)
ggplot(points_salary, aes(x = cost_point)) + geom_histogram(binwidth = 1)
ggplot(points_salary, aes(x = cost_point)) + geom_histogram()
ggplot(points_salary, aes(x = cost_point)) + geom_density()
summary(points_salary$cost_point)
points_salary <- mutate(points_salary, cost_point = total_salary*1000000 / total_points)
ggplot(points_salary, aes(x = cost_point)) + geom_density()
ggplot(points_salary, aes(x = cost_point)) + geom_density() + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme_dark() + scale_fill_distiller(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_density() + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme_dark() + scale_fill_gradient(low="red", high="yellow")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot() + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme_dark() + scale_fill_gradient(low="red", high="yellow")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(binwidth = 1000) + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme_dark() + scale_fill_gradient(low="red", high="yellow")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(binwidth = 1000) + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + scale_fill_gradient(low="red", high="yellow")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(binwidth = 1000) + scale_fill_gradient(low="red", high="yellow") + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(binwidth = 1000) + scale_fill_gradient(low="red", high="yellow") + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + scale_fill_brewer(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(binwidth = 1000)+ labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + scale_fill_brewer(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(binwidth = 1000) + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + scale_fill_distiller(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_density() + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + scale_fill_distiller(palette = "Blues")
scale_fill_distiller(palette = "Blues")
+ ggplot(points_salary, aes(x = cost_point)) + geom_density() + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph")
scale_fill_distiller(palette = "Blues") + ggplot(points_salary, aes(x = cost_point)) + geom_density() + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph")
ggplot(points_salary, aes(x = cost_point)) + geom_density() + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + scale_fill_distiller(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_density(color = "Red") + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + scale_fill_distiller(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_density(color = "Red") + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme_classic() + scale_fill_distiller(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_density(color = "Red") + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme_classic(legend.position = "Bottom" + scale_fill_distiller(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_density(color = "Red") + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme_classic(legend.position = "Bottom") + scale_fill_distiller(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_density(color = "Red") + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme(legend.position = "Bottom") + scale_fill_distiller(palette = "Blues")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(color = "Red") + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme(legend.position = "Bottom")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(color = "Red", binwidth = 1000) + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme(legend.position = "Bottom")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(color = "Red", binwidth = 9000) + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme(legend.position = "Bottom")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(color = "Red", binwidth = 900) + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme(legend.position = "Bottom")
ggplot(points_salary, aes(x = cost_point)) + geom_dotplot(color = "Red", binwidth = 500) + labs(x = "Cost Per Point", y = "Density", title = "Cost Per Point Density Graph") + theme(legend.position = "Bottom")
ggplot(points_salary, aes(x = mean_salary, y = mean_points)) + geom_point()
ggplot(points_salary, aes(x = mean_salary, y = mean_points)) + geom_point() + labs(title = "Mean Salary vs Mean Points", x = "Mean Salary", y = "Mean Points")
ggplot(points_salary, aes(x = mean_salary, y = mean_points)) + geom_point(color = "Blue") + labs(title = "Mean Salary vs Mean Points", x = "Mean Salary", y = "Mean Points")
ggplot(points_salary, aes(x = mean_salary, y = mean_points)) + geom_point(color = "Blue") + labs(title = "Mean Salary vs Mean Points", x = "Mean Salary", y = "Mean Points") + scale_fill_gradientn(colours=c("black","yellow","red"),
breaks=c(0,4,7), labels=format(c("0","4","7")))
ggplot(points_salary, aes(x = mean_salary, y = mean_points)) + geom_point(color = "Blue") + labs(title = "Mean Salary vs Mean Points", x = "Mean Salary", y = "Mean Points") + scale_fill_gradientn(colours=c("black","yellow","red"),
breaks=c(0,400,700), labels=format(c("0","4","7")))
ggplot(points_salary, aes(x = mean_salary, y = mean_points)) + geom_point(aes(color = cut(cost_point, c(-Inf, 10000, 12000, Inf))),
size = 5) + labs(title = "Mean Salary vs Mean Points", x = "Mean Salary", y = "Mean Points")
ggplot(points_salary, aes(x = mean_salary, y = mean_points)) + geom_point(aes(color = cut(cost_point, c(-Inf, 10000, 12000, Inf))),
size = 6) + labs(title = "Mean Salary vs Mean Points", x = "Mean Salary", y = "Mean Points")
ls
head(mtcars)
getwd()
mtcars[c("mpg"), ]
mtcars[c("mpg")]
mtcars[c("mpg", "disp", "hp")]
png(filename = 'Desktop/STAT-133/stat133-lab05/exports/scatterplot-mpg-wt.png')
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight')
dev.off()
png(filename = 'Desktop/STAT-133/stat133-lab05/exports/scatterplot-mpg-wt.png')
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight')
dev.off()
write.csv(
x = summary(mtcars),
file = 'Desktop/STAT-133/stat133-lab05/exports/summary-mtcars.txt')
png(filename = 'Desktop/STAT-133/stat133-lab05/exports/scatterplot-hp-wt.png', width = 600, height = 600)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
dev.off()
jpeg(filename = 'Desktop/STAT-133/stat133-lab05/exports/histogram-mpg.jpeg', width = 600, height = 400)
hist(mtcars$hp, pch = 20, xlab = "Horsepower")
dev.off()
jpeg(filename = 'Desktop/STAT-133/stat133-lab05/exports/histogram-mpg.jpeg', width = 600, height = 400)
hist(mtcars$hp, pch = 20, xlab = "Horsepower", title("Yo"))
dev.off()
jpeg(filename = 'Desktop/STAT-133/stat133-lab05/exports/histogram-mpg.jpeg', width = 600, height = 400)
hist(mtcars$hp, pch = 20, xlab = "Horsepower", main = "Yo")
dev.off()
jpeg(filename = 'Desktop/STAT-133/stat133-lab05/exports/histogram-mpg.jpeg', width = 600, height = 400)
hist(mtcars$hp, pch = 20, xlab = "Horsepower", main = "Horsepower Histogram")
dev.off()
mtcars
pdf(file = 'Desktop/STAT-133/stat133-lab05/exports/histogram-mpg.pdf', width = 7, height = 5)
hist(mtcars$hp, pch = 20, xlab = "Horsepower", main = "Horsepower Histogram")
dev.off()
library(ggplot2)
ggsave(filename = 'Desktop/STAT-133/stat133-lab05/exports/scatterplot-mpg-disp.pdf', plot = ggplot(mtcars$mpg, mtcars$disp) + geom_point(), width = 7, height = 5)
ggsave(filename = 'Desktop/STAT-133/stat133-lab05/exports/scatterplot-mpg-disp.pdf', plot = ggplot(aes(mtcars$mpg, mtcars$disp) + geom_point(), width = 7, height = 5)
ggsave(filename = 'Desktop/STAT-133/stat133-lab05/exports/scatterplot-mpg-disp.pdf', plot = ggplot(aes(mtcars$mpg, mtcars$disp)) + geom_point(), width = 7, height = 5)
ggsave(filename = 'Desktop/STAT-133/stat133-lab05/exports/scatterplot-mpg-disp.pdf', plot = ggplot(mtcars, aes(mpg, disp)) + geom_point(), width = 7, height = 5)
ggsave(filename = 'Desktop/STAT-133/stat133-lab05/exports/scatterplot-mpg-disp.pdf', plot = ggplot(mtcars, aes(mpg, disp)) + geom_point() + labs(title = "MPG vs DISP"), width = 7, height = 5)
write.csv(
x = first_df,
file = 'Desktop/STAT-133/stat133-lab05/exports/dataset.csv')
first_df <- mtcars[c("mpg", "disp", "hp")]
write.csv(
x = first_df,
file = 'Desktop/STAT-133/stat133-lab05/exports/dataset.csv')
write.csv(
x = str(mtcars),
file = 'Desktop/STAT-133/stat133-lab05/exports/mtcars-structure.txt')
write.txt(
x = str(mtcars),
file = 'Desktop/STAT-133/stat133-lab05/exports/mtcars-structure.txt')
write.table(
x = str(mtcars),
file = 'Desktop/STAT-133/stat133-lab05/exports/mtcars-structure.txt')
write.table(
x = summary(mtcars),
file = 'Desktop/STAT-133/stat133-lab05/exports/summary-mtcars.txt')
write.csv(
x = first_df,
file = 'Desktop/STAT-133/stat133-lab05/exports/dataset.csv')
getwd()
(1:5)*2
rep(0, n)
rep(0, 5)
lfactorial(1)
factorial(1)
factorial(10000)
factorial(100)
lfactorial(100)
factorial(100)
factorial(200)
lfactorial(200)
e^lfactorial(200)
exp(lfactorial(200))
quantile(c(1,2,3,4,5,6,7,8))
quantile(c(1,2,3,4,5,6,7,8))[2]
c(quantile(c(1,2,3,4,5,6,7,8))[2], 2)
class("fsd")
abs(-4)
states <- rownames(USArrests)
head(states)
num_chars <- nchar(states)
hist(states)
hist(num_chars)
table(num_chars)
shiny::runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
runApp('Desktop/STAT-133/hw/Workout2')
